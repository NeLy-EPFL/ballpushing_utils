{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6ee6b76f",
   "metadata": {},
   "source": [
    "# Description\n",
    "\n",
    "In this notebook we explore how skeleton data looks. In particular, we need to test whether we can generate satisfying smoothing for the skeleton data that doesn't impair time resolution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cbdb2e1",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0350cb93",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "import sys\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import random\n",
    "from scipy.signal import correlate\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import holoviews as hv\n",
    "hv.extension('bokeh')\n",
    "from scipy.signal import savgol_filter\n",
    "\n",
    "from pykalman import KalmanFilter\n",
    "\n",
    "src_path = Path.cwd().parent / \"src\"\n",
    "if src_path not in sys.path:\n",
    "    sys.path.append(str(src_path))\n",
    "\n",
    "from Ballpushing_utils import Experiment, Fly\n",
    "\n",
    "from utils_behavior import Processing\n",
    "\n",
    "from utils_behavior import Sleap_utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "626c89c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "ExampleFly_path = Path(\n",
    "    \"/mnt/upramdya_data/MD/MultiMazeRecorder/Videos/231130_TNT_Fine_2_Videos_Tracked/arena2/corridor5\"\n",
    ")\n",
    "\n",
    "ExampleFly = Fly(ExampleFly_path, as_individual=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e08aa0e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "skeleton_data = ExampleFly.tracking_data.fly_skeleton"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "134e62a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "skeleton_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50b02eca",
   "metadata": {},
   "source": [
    "# Functions to test smoothing parameters\n",
    "\n",
    "Here we're gonna test the mean squared error and the time lag between smoothed and raw data to find the best smoothing parameter that reduce the tracking error-related noise while keeping time resolution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7def6953",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_time_lag(raw_data, smoothed_data, sampling_rate):\n",
    "    correlation = correlate(smoothed_data, raw_data, mode=\"full\")\n",
    "    lag = correlation.argmax() - (len(raw_data) - 1)\n",
    "    time_lag = lag / sampling_rate  # Convert lag to time\n",
    "    return time_lag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb3d5195",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_error(raw_data, smoothed_data):\n",
    "    mse = mean_squared_error(raw_data, smoothed_data)\n",
    "    return mse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "470ad9db",
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_filter_parameters(raw_data, sampling_rate, window_lengths, polyorders):\n",
    "    results = []\n",
    "    for wl in window_lengths:\n",
    "        for po in polyorders:\n",
    "            try:\n",
    "                smoothed_data = Processing.savgol_lowpass_filter(raw_data, window_length=wl, polyorder=po)\n",
    "                time_lag = compute_time_lag(raw_data, smoothed_data, sampling_rate)\n",
    "                mse = compute_error(raw_data, smoothed_data)\n",
    "                results.append((wl, po, time_lag, mse))\n",
    "            except ValueError:\n",
    "                print(f\"Invalid parameters: window_length={wl}, polyorder={po}\")\n",
    "                continue  # Skip invalid parameter combinations\n",
    "    return results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "169c6ff1",
   "metadata": {},
   "source": [
    "# Tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24a946b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the parameters to test\n",
    "window_lengths = [11, 21, 51, 101, 151, 201, 251, 301]  # Must be odd integers\n",
    "polyorders = [1,]\n",
    "sampling_rate = ExampleFly.experiment.fps  # Replace with the actual sampling rate of your data\n",
    "\n",
    "# Initialize a dictionary to store results for each keypoint\n",
    "results = {}\n",
    "\n",
    "# Iterate over each keypoint column in the skeleton_data\n",
    "for column in skeleton_data.columns:\n",
    "    if column.startswith(\"x_\") or column.startswith(\"y_\"):  # Filter keypoint columns\n",
    "        raw_data = skeleton_data[column].dropna().values  # Remove NaN values\n",
    "        if len(raw_data) < min(window_lengths):  # Skip if data is too short\n",
    "            print(f\"Skipping {column} as data length={len(raw_data)} is too short\")\n",
    "            continue\n",
    "\n",
    "        # Test filter parameters for the current keypoint\n",
    "        keypoint_results = test_filter_parameters(raw_data, sampling_rate, window_lengths, polyorders)\n",
    "\n",
    "        # Store the results\n",
    "        results[column] = keypoint_results\n",
    "\n",
    "# Display results for each keypoint\n",
    "for keypoint, keypoint_results in results.items():\n",
    "    print(f\"Results for {keypoint}:\")\n",
    "    for wl, po, time_lag, mse in keypoint_results:\n",
    "        print(f\"  Window Length: {wl}, Polyorder: {po}, Time Lag: {time_lag:.4f}s, MSE: {mse:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1dfbf595",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a function to find the best parameters\n",
    "def find_best_parameters(results):\n",
    "    best_parameters = {}\n",
    "    for keypoint, keypoint_results in results.items():\n",
    "        # Sort by MSE and then by time lag to prioritize low error and minimal lag\n",
    "        sorted_results = sorted(keypoint_results, key=lambda x: (x[3], abs(x[2])))  # Sort by MSE, then time lag\n",
    "        best_parameters[keypoint] = sorted_results[0]  # Take the best combination\n",
    "    return best_parameters\n",
    "\n",
    "\n",
    "# Find the best parameters for each keypoint\n",
    "best_parameters = find_best_parameters(results)\n",
    "\n",
    "# Display the best parameters for each keypoint\n",
    "print(\"Best parameters for each keypoint:\")\n",
    "for keypoint, (wl, po, time_lag, mse) in best_parameters.items():\n",
    "    print(f\"{keypoint}: Window Length={wl}, Polyorder={po}, Time Lag={time_lag:.4f}s, MSE={mse:.4f}\")\n",
    "\n",
    "# Optionally, find the overall best parameters across all keypoints\n",
    "overall_best = min(\n",
    "    [(keypoint, wl, po, time_lag, mse) for keypoint, (wl, po, time_lag, mse) in best_parameters.items()],\n",
    "    key=lambda x: (x[4], abs(x[3])),  # Sort by MSE, then time lag\n",
    ")\n",
    "\n",
    "print(\"\\nOverall best parameters across all keypoints:\")\n",
    "print(\n",
    "    f\"Keypoint={overall_best[0]}, Window Length={overall_best[1]}, Polyorder={overall_best[2]}, \"\n",
    "    f\"Time Lag={overall_best[3]:.4f}s, MSE={overall_best[4]:.4f}\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5cbb3ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "skeletontrack = Sleap_utils.Sleap_Tracks(\n",
    "    ExampleFly_path / \"corridor5_preprocessed_full_body.h5\", smoothed_tracks=True, smoothing_params=(11, 3)\n",
    ")\n",
    "\n",
    "skeletontrack.video"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "045992a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "skeletontrack = Sleap_utils.Sleap_Tracks(ExampleFly_path/\"corridor5_preprocessed_full_body.h5\", smoothed_tracks=True, smoothing_params=(11,1)).objects[0].dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2c2bab9",
   "metadata": {},
   "outputs": [],
   "source": [
    "skeletontrack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68917d41",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_distances(data, reference_key):\n",
    "    \"\"\"Calculate distances between each keypoint and the reference keypoint.\"\"\"\n",
    "    distances = {}\n",
    "    ref_x, ref_y = data[f\"x_{reference_key}\"], data[f\"y_{reference_key}\"]\n",
    "    for column in data.columns:\n",
    "        if column.startswith(\"x_\") and column != f\"x_{reference_key}\":\n",
    "            key = column[2:]  # Extract keypoint name\n",
    "            key_x, key_y = data[f\"x_{key}\"], data[f\"y_{key}\"]\n",
    "            distances[key] = np.sqrt((key_x - ref_x) ** 2 + (key_y - ref_y) ** 2)\n",
    "    return pd.DataFrame(distances)\n",
    "\n",
    "\n",
    "def bootstrap_ci(data, n_bootstrap=1000, ci=95):\n",
    "    \"\"\"Calculate bootstrapped confidence intervals for each column.\"\"\"\n",
    "    lower_bound = (100 - ci) / 2\n",
    "    upper_bound = 100 - lower_bound\n",
    "    ci_bounds = {}\n",
    "    for column in data.columns:\n",
    "        bootstrap_samples = [\n",
    "            np.mean(np.random.choice(data[column].dropna(), size=len(data[column]), replace=True))\n",
    "            for _ in range(n_bootstrap)\n",
    "        ]\n",
    "        ci_bounds[column] = (\n",
    "            np.percentile(bootstrap_samples, lower_bound),\n",
    "            np.percentile(bootstrap_samples, upper_bound),\n",
    "        )\n",
    "    return ci_bounds\n",
    "\n",
    "\n",
    "def detect_outliers(distances, ci_bounds):\n",
    "    \"\"\"Detect outliers based on confidence intervals.\"\"\"\n",
    "    outliers = pd.DataFrame(False, index=distances.index, columns=distances.columns)\n",
    "    for key, (lower, upper) in ci_bounds.items():\n",
    "        outliers[key] = (distances[key] < lower) | (distances[key] > upper)\n",
    "    return outliers\n",
    "\n",
    "def smooth_outliers(data, outliers, window=3):\n",
    "    \"\"\"Smooth out outliers using neighboring frames.\"\"\"\n",
    "    smoothed_data = data.copy()\n",
    "    for column in outliers.columns:\n",
    "        for idx in outliers.index[outliers[column]]:\n",
    "            # Replace outlier with the mean of neighboring frames\n",
    "            start = max(0, idx - window)\n",
    "            end = min(len(data), idx + window + 1)\n",
    "            smoothed_data.loc[idx, column] = data.loc[start:end, column].mean()\n",
    "    return smoothed_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e20656d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "reference_key = \"Thorax\"  # Use Thorax as the reference point\n",
    "distances = calculate_distances(skeleton_data, reference_key)\n",
    "ci_bounds = bootstrap_ci(distances)\n",
    "outliers = detect_outliers(distances, ci_bounds)\n",
    "smoothed_distances = smooth_outliers(distances, outliers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afbad2d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "smoothed_data = skeleton_data.copy()\n",
    "\n",
    "for key in distances.columns:\n",
    "    x_col, y_col = f\"x_{key}\", f\"y_{key}\"\n",
    "    smoothed_data.loc[outliers[key], [x_col, y_col]] = np.nan  # Mark outliers as NaN\n",
    "    smoothed_data[[x_col, y_col]] = smoothed_data[[x_col, y_col]].interpolate()  # Interpolate missing values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "811d3b97",
   "metadata": {},
   "source": [
    "# Looking at a small subset of data\n",
    "\n",
    "Will be useful in order to compare smoothed and raw data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7702c46f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot sns curves of smoothed and raw data for a specific keypoint across 10 seconds\n",
    "\n",
    "def plot_keypoint_data(raw_data, smoothed, keypoint, start_time=0, end_time=10):\n",
    "    # Extract the x and y coordinates for the specified keypoint\n",
    "    raw_data = skeleton_data[f\"y_{keypoint}\"].dropna().values\n",
    "    smoothed_data = smoothed_data[f\"y_{keypoint}\"].dropna().values\n",
    "\n",
    "    # crop the smoothed data to the same length as the raw data\n",
    "    smoothed_data = smoothed_data[:len(raw_data)]\n",
    "\n",
    "    # Create a time array based on the sampling rate\n",
    "    time = np.arange(len(raw_data)) / ExampleFly.experiment.fps\n",
    "\n",
    "    # Filter the data for the specified time range\n",
    "    mask = (time >= start_time) & (time <= end_time)\n",
    "    time = time[mask]\n",
    "    raw_data = raw_data[mask]\n",
    "    smoothed_data = smoothed_data[mask]\n",
    "\n",
    "    # Plot the data using seaborn\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    sns.lineplot(x=time, y=raw_data, label='Y Coordinate', color='blue')\n",
    "    sns.lineplot(x=time, y=smoothed_data, label='Y Coordinate_smoothed', color='orange')\n",
    "    plt.title(f\"Keypoint Data for {keypoint} from {start_time}s to {end_time}s\")\n",
    "    plt.xlabel(\"Time (s)\")\n",
    "    plt.ylabel(\"Coordinate Value\")\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b58f4b42",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to plot keypoint data for a specific time range\n",
    "def plot_keypoint_data(raw_data, smoothed, keypoint, start_time, end_time):\n",
    "    # Extract the y-coordinates for the specified keypoint\n",
    "    raw_data = raw_data[f\"y_{keypoint}\"].dropna().values\n",
    "    smoothed_data = smoothed[f\"y_{keypoint}\"].dropna().values\n",
    "\n",
    "    # Crop the smoothed data to the same length as the raw data\n",
    "    smoothed_data = smoothed_data[: len(raw_data)]\n",
    "\n",
    "    # Create a time array based on the sampling rate\n",
    "    time = np.arange(len(raw_data)) / ExampleFly.experiment.fps\n",
    "\n",
    "    # Filter the data for the specified time range\n",
    "    mask = (time >= start_time) & (time <= end_time)\n",
    "    time = time[mask]\n",
    "    raw_data = raw_data[mask]\n",
    "    smoothed_data = smoothed_data[mask]\n",
    "\n",
    "    # Plot the data using seaborn\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    sns.lineplot(x=time, y=raw_data, label=\"Y Coordinate (Raw)\", color=\"blue\")\n",
    "    sns.lineplot(x=time, y=smoothed_data, label=\"Y Coordinate (Smoothed)\", color=\"orange\")\n",
    "    plt.title(f\"Keypoint Data for {keypoint} from {start_time:.2f}s to {end_time:.2f}s\")\n",
    "    plt.xlabel(\"Time (s)\")\n",
    "    plt.ylabel(\"Coordinate Value\")\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "# Sample 20 random bouts and plot\n",
    "Key = \"Lfront\"\n",
    "video_duration = len(skeleton_data) / ExampleFly.experiment.fps  # Total video duration in seconds\n",
    "bout_duration = 10  # Duration of each bout in seconds\n",
    "\n",
    "for i in range(20):\n",
    "    start_time = random.uniform(0, video_duration - bout_duration)\n",
    "    end_time = start_time + bout_duration\n",
    "    print(f\"Plotting bout {i+1}: {start_time:.2f}s to {end_time:.2f}s\")\n",
    "    plot_keypoint_data(skeleton_data, smoothed_data, Key, start_time, end_time)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c991a85f",
   "metadata": {},
   "source": [
    "## Saving the smoothed test "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52556ec2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9f5ae051",
   "metadata": {},
   "source": [
    "# Generating a Hv curve\n",
    "\n",
    "Holoviews allow precise zooming so we'll use it to visually explore the smoothed vs raw data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cedc2f78",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the raw and smoothed data for a specific keypoint\n",
    "\n",
    "Key = \"Lfront\"\n",
    "\n",
    "raw_data = skeleton_data[f\"x_{Key}\"].dropna().values\n",
    "smoothed_data = skeletontrack[f\"x_{Key}\"].dropna().values\n",
    "# crop the smoothed_data to match the length of raw_data\n",
    "smoothed_data = smoothed_data[: len(raw_data)]\n",
    "time = np.arange(len(raw_data)) / ExampleFly.experiment.fps  # Time vector\n",
    "\n",
    "Curves = hv.Curve((time, raw_data), label=\"Raw Data\").opts(\n",
    "    title=f\"Raw and Smoothed Data for {Key}\",\n",
    "    xlabel=\"Time (s)\",\n",
    "    ylabel=\"Position\",\n",
    "    color=\"blue\",\n",
    "    width=800,\n",
    "    height=400,\n",
    ")\n",
    "smoothed_curve = hv.Curve((time, smoothed_data), label=\"Smoothed Data\").opts(\n",
    "    color=\"red\",\n",
    "    width=800,\n",
    "    height=400,\n",
    ")\n",
    "# Overlay the curves\n",
    "\n",
    "overlay = Curves * smoothed_curve\n",
    "\n",
    "# Save the plot as html\n",
    "hv.save(overlay, \"/mnt/upramdya_data/MD/Pictures/smoothed_data_plot.html\", backend=\"bokeh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcb00e05",
   "metadata": {},
   "source": [
    "# Generating a labelled clip for tracking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13dffeb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "Sleap_utils.generate_annotated_video(\n",
    "    video=skeletontrack.video,\n",
    "    sleap_tracks_list=[skeletontrack],\n",
    "    output_path=ExampleFly_path / \"Annotated_Video.mp4\",\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c99c466",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tracking_analysis",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
